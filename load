#! /users/ke2mcbri/www/app/bin/python
import click
import glob
from simfile import Simfile

from itg2.stats_xml import TopScores
import db.models as models
from db.models import Song, Chart, Score, connect_to_db


STEP_KEYS = ['1', '2', '4']


@click.group()
def cli():
    pass


@click.command()
def stats(datadir):
    stats_path = '/'.join([args.datadir, 'Stats.xml'])

    db = connect_to_db()

    top_scores = TopScores(stats_path)
    for hs in top_scores.scores:

        with db.atomic():
            this_song, song_created = Song.get_or_create(
                    title=hs.song_title,
                    length=hs.song_length,
                    defaults={
                        'title': hs.song_title,
                        'length': hs.song_length,
                        }
                )

            this_chart, chart_created = Chart.get_or_create(
                    song_id=this_song.id,

                    title=hs.difficulty,
                    steps_type=hs.steps_type,
                    taps=hs.radar['Taps'],
                    jumps=hs.radar['Jumps'],
                    holds=hs.radar['Holds'],
                    mines=hs.radar['Mines'],
                    rolls=hs.radar['Rolls'],
                    hands=hs.radar['Hands'],
                    defaults = {
                        'song_id': this_song.id,
                        'title': hs.difficulty,
                        'steps_type': hs.steps_type,
                        'taps': hs.radar['Taps'],
                        'jumps': hs.radar['Jumps'],
                        'holds': hs.radar['Holds'],
                        'mines': hs.radar['Mines'],
                        'rolls': hs.radar['Rolls'],
                        'hands': hs.radar['Hands'],
                        }
                    )

            this_score, score_created = Score.get_or_create(
                    chart_id = this_chart.id,

                    grade=hs.grade,
                    percent=hs.pct_score,
                    modifiers=hs.modifiers,
                    datetime=hs.datetime,

                    fantastic=hs.tapnotes['Marvelous'],
                    excellent=hs.tapnotes['Perfect'],
                    great=hs.tapnotes['Great'],
                    decent=hs.tapnotes['Good'],
                    wayoff=hs.tapnotes['Boo'],
                    miss=hs.tapnotes['Miss'],

                    ng=hs.holdnotes['NG'],
                    ok=hs.holdnotes['OK'],
                    defaults = {
                        'chart_id': this_chart.id,
                        'grade': hs.grade,
                        'percent': hs.pct_score,
                        'modifiers': hs.modifiers,
                        'datetime': hs.datetime,
                        'fantastic': hs.tapnotes['Marvelous'],
                        'excellent': hs.tapnotes['Perfect'],
                        'great': hs.tapnotes['Great'],
                        'decent': hs.tapnotes['Good'],
                        'wayoff': hs.tapnotes['Boo'],
                        'miss': hs.tapnotes['Miss'],
                        'ng': hs.holdnotes['NG'],
                        'ok': hs.holdnotes['OK'],
                        }
                    )


@click.command()
def pack(datadir):
    """ Use the sm data to supplement what we know from the stats.xml
     - we should probably look up the chart *first*, and then update the song via
         the chart's foreign key
     - NOTE: i pretty much just made up the note counting algo and manually checked
     Twinkle Twinkle and Danger (Pinocchio) so I wouldn't really trust it...
    """
    packname = pack_path.split('/')[-1] if pack_path.split('/')[-1] else pack_path.split('/')[-2]
    simpaths = glob.iglob(f'{pack_path}/*/*.sm')
    sims = [Simfile(path) for path in simpaths]

    for sim in sims:
        title = sim['TITLE']
        subtitle = sim['SUBTITLE']
        artist = sim['ARTIST']
        bpm = sim['DISPLAYBPM']
        pack = sim['CREDIT']
        banner = sim['BANNER']
        bg = sim['BACKGROUND']
        genre = sim['GENRE']

        for chart in sim.charts:
            meter = chart.meter
            difficulty = chart.difficulty
            description = chart.description
            radar = chart.radar # [just a list of 0.0-1.0 values]
            print(f'{pack} // {title} // {difficulty}')

            notes = chart.notes
            # now I can count the notes and try to equate them...
            note_counts = count_notes(notes)


def count_notes(notes):
    num_taps = 0
    num_holds = 0
    num_jumps = 0
    num_hands = 0
    num_rolls = 0
    num_mines = 0

    holds = [False, False, False, False]
    for row in notes:
        line = row[1]
        curr_notes = len(list(filter(lambda s: s in STEP_KEYS, line)))
        # simultaneous notes resulting in a jump or hand
        if curr_notes >= 2:
            num_jumps += 1
        if curr_notes >= 3:
            num_hands += 1

        for idx, note in enumerate(line):
            curr_holds = len(list(filter(lambda s: s, holds)))
            # held notes resulting in a hand (doesn't count as jump if only 2)

            if note == '1':
                num_taps += 1
                if curr_holds > 2:
                    num_hands += 1
            elif note == '2':
                num_taps += 1
                num_holds += 1
                holds[idx] = True
                if curr_holds > 2:
                    num_hands += 1
            elif note == 'M':
                num_mines += 1
            elif note == '4':
                num_rolls += 1
                holds[idx] = True
                if curr_holds > 2:
                    num_hands += 1
            elif note == '3':
                holds[idx] = False
    return {
            'num_taps': num_taps,
            'num_holds': num_holds,
            'num_jumps': num_jumps,
            'num_hands': num_hands,
            'num_rolls': num_rolls,
            'num_mines': num_mines,
            }
