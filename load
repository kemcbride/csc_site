#! /users/ke2mcbri/www/app/bin/python
import click
import glob
from simfile import Simfile

from db.models import Song, Chart, Score, connect_to_db
from itg2.stats_xml import TopScores
from itg2.sm_util import count_notes


@click.group()
def cli():
    pass


@click.command()
@click.argument('datadir')
def stats(datadir):
    """ Load a Stats.xml into the db
    """
    stats_path = '/'.join([datadir, 'Stats.xml'])

    db = connect_to_db()

    top_scores = TopScores(stats_path)
    for hs in top_scores.scores:

        with db.atomic():
            this_song, song_created = Song.get_or_create(
                    title=hs.song_title,
                    length=hs.song_length,
                    defaults={
                        'title': hs.song_title,
                        'length': hs.song_length,
                        }
                )

            this_chart, chart_created = Chart.get_or_create(
                    song_id=this_song.id,

                    title=hs.difficulty,
                    steps_type=hs.steps_type,
                    taps=hs.radar['Taps'],
                    jumps=hs.radar['Jumps'],
                    holds=hs.radar['Holds'],
                    mines=hs.radar['Mines'],
                    rolls=hs.radar['Rolls'],
                    hands=hs.radar['Hands'],
                    defaults = {
                        'song_id': this_song.id,
                        'title': hs.difficulty,
                        'steps_type': hs.steps_type,
                        'taps': hs.radar['Taps'],
                        'jumps': hs.radar['Jumps'],
                        'holds': hs.radar['Holds'],
                        'mines': hs.radar['Mines'],
                        'rolls': hs.radar['Rolls'],
                        'hands': hs.radar['Hands'],
                        }
                    )

            this_score, score_created = Score.get_or_create(
                    chart_id = this_chart.id,

                    grade=hs.grade,
                    percent=hs.pct_score,
                    modifiers=hs.modifiers,
                    datetime=hs.datetime,

                    fantastic=hs.tapnotes['Marvelous'],
                    excellent=hs.tapnotes['Perfect'],
                    great=hs.tapnotes['Great'],
                    decent=hs.tapnotes['Good'],
                    wayoff=hs.tapnotes['Boo'],
                    miss=hs.tapnotes['Miss'],

                    ng=hs.holdnotes['NG'],
                    ok=hs.holdnotes['OK'],
                    defaults = {
                        'chart_id': this_chart.id,
                        'grade': hs.grade,
                        'percent': hs.pct_score,
                        'modifiers': hs.modifiers,
                        'datetime': hs.datetime,
                        'fantastic': hs.tapnotes['Marvelous'],
                        'excellent': hs.tapnotes['Perfect'],
                        'great': hs.tapnotes['Great'],
                        'decent': hs.tapnotes['Good'],
                        'wayoff': hs.tapnotes['Boo'],
                        'miss': hs.tapnotes['Miss'],
                        'ng': hs.holdnotes['NG'],
                        'ok': hs.holdnotes['OK'],
                        }
                    )


@click.command()
@click.argument('pack_path')
def pack(pack_path):
    """ Use sm pack data to supplement the db
     - we should probably look up the chart *first*, and then update the song via
         the chart's foreign key
     - NOTE: i pretty much just made up the note counting algo and manually checked
     Twinkle Twinkle and Danger (Pinocchio) so I wouldn't really trust it...
    """
    packname = pack_path.split('/')[-1] if pack_path.split('/')[-1] else pack_path.split('/')[-2]
    simpaths = glob.iglob(f'{pack_path}/*/*.sm')
    sims = [Simfile(path) for path in simpaths]

    for sim in sims:
        title = sim['TITLE']
        subtitle = sim['SUBTITLE']
        artist = sim['ARTIST']
        bpm = sim['DISPLAYBPM']
        pack = sim['CREDIT']
        banner = sim['BANNER']
        bg = sim['BACKGROUND']
        genre = sim['GENRE']

        for chart in sim.charts:
            difficulty = chart.difficulty
            stepstype = chart.stepstype
            meter = chart.meter
            description = chart.description
            radar = chart.radar # [just a list of 0.0-1.0 values]

            notes = chart.notes
            note_counts = count_notes(notes)

            db_title = f'{title} {subtitle}'
            print(f'--- {db_title} ---')
            print(note_counts['taps'])
            print(note_counts['holds'])
            print(note_counts['jumps'])
            print(note_counts['hands'])
            print(note_counts['mines'])
            print(note_counts['rolls'])

            # Yes, this is a _lot_
            changed = Chart.update(
                    pack=pack,
                    level=meter,
                    step_artist=description,
                    ).where(
                    Chart.title == difficulty
                    and Chart.steps_type == stepstype
                    and Chart.taps == note_counts['taps']
                    and Chart.jumps == note_counts['jumps']
                    and Chart.holds == note_counts['holds']
                    and Chart.mines == note_counts['mines']
                    and Chart.rolls == note_counts['rolls']
                    and Chart.hands == note_counts['hands']
                    )

cli.add_command(stats)
cli.add_command(pack)
if __name__ == '__main__':
    cli()
